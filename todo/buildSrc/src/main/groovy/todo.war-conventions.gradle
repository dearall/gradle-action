plugins {
    id 'todo.commons'
    id 'war'
}

war {
    dependsOn createBuildInfoFile
    from(buildDir) {
        include 'build-info.properties'
        into('WEB-INF/classes')
    }

    println "war archiveFileName: " + archiveFileName.get()
}

//功能测试： 创建 functionalTest sourceSet
def functionalTest = sourceSets.create('functionalTest')
configurations[functionalTest.implementationConfigurationName].extendsFrom(configurations.testImplementation)
configurations[functionalTest.runtimeOnlyConfigurationName].extendsFrom(configurations.testRuntimeOnly)

// The drivers we want to use
def drivers = ["firefox", "chrome", "chromeHeadless"]

drivers.each { driver ->
    //注册添加 functionalTest task
    def functionalTestTask = tasks.register("${driver}FunctionalTest", Test) {
        group = 'verification'
        description = "Runs remote functional tests with ${driver}"

        testClassesDirs = functionalTest.output.classesDirs
        classpath = configurations[functionalTest.runtimeClasspathConfigurationName] + functionalTest.output

        useJUnitPlatform()
        include '**/*'

        // Fail the 'test' task on the first test failure
        failFast = true

        testLogging {
            // show standard out and standard error of the test JVM(s) on the console
            showStandardStreams true
            // Sets the events to be logged.
            events "passed", "skipped", "failed"
        }

        shouldRunAfter(tasks.named('test'))

        forkEvery = 5
        maxParallelForks = determineMaxParallelForks()

        println 'functionalTest.implementationConfigurationName: ' + functionalTest.implementationConfigurationName
        println 'functionalTest.runtimeOnlyConfigurationName: ' + functionalTest.runtimeOnlyConfigurationName
        println 'functionalTest.runtimeClasspathConfigurationName: ' + functionalTest.runtimeClasspathConfigurationName

        outputs.upToDateWhen { false }  // Always run tests

        // geb 强制属性，指定浏览器类型
        systemProperty "geb.env", driver
        systemProperty "geb.build.reportsDir", reporting.file("geb/$name")
        systemProperty 'geb.build.baseUrl', "http://localhost:8080/todo/"
    }
}

// 太耗时了，单独执行功能测试就可以了
tasks.register('functionalTest') {
    dependsOn(firefoxFunctionalTest, chromeFunctionalTest, chromeHeadlessFunctionalTest)

    group = 'verification'
    description = "Runs remote functional tests with 'firefox', 'chrome', 'chrome --headless --disable-gpu' by geb " +
            "and selenium tools."
}

dependencies {
    implementation (libs.bundles.groovy) // for spock test using groovy

    testImplementation (libs.junit.jupiter.api)
    testRuntimeOnly (libs.junit.jupiter.engine)
    testRuntimeOnly (libs.junit.vintage.engine)

    testImplementation (libs.junit4)
    testImplementation (libs.testng)
    testImplementation (libs.spock.core)
    testImplementation (libs.spock.junit4)
    testImplementation (libs.geb.spock)
    testImplementation (libs.geb.junit4)

    // geb and selenium
    implementation (libs.geb.core)
    implementation (libs.selenium.java)
    implementation (libs.selenium.support)
    implementation (libs.selenium.firefox.driver)
    implementation (libs.selenium.chrome.driver)

    implementation (libs.webdrivermanager)

    functionalTestImplementation project
}

static def determineMaxParallelForks() {
    (Runtime.runtime.availableProcessors() / 2) < 1 ? 1 : Runtime.runtime.availableProcessors() / 2
}

