plugins {
    id 'todo.java-conventions'
    id 'todo.war-conventions'

    //Advanced gradle plugin for running web-apps on embedded servlet containers jetty and tomcat.
    id 'todo.gretty-conventions'
    //Gradle plugin that provides deployment capabilities to local and remote containers via Cargo.
    id 'todo.cargo-conventions'
    id 'todo.jacoco-conventions'
    id 'todo.checkstyle-conventions'
    id 'todo.pmd-conventions'
    id 'todo.spotbugs-conventions'

    id 'todo.sourcesJar-conventions'
    id 'todo.javadocJar-conventions'
    id 'todo.groovydocJar-conventions'

    id 'todo.distribution-conventions'

    id 'todo.maven-publish-war-conventions'
}

jar {
    enabled(false)
}

dependencies {
    implementation project(':todo-model')
    implementation project(':todo-repository')

    providedCompile libs.servlet.api
    providedCompile libs.jsp.api

    runtimeOnly libs.jstl
    runtimeOnly libs.taglibs.standard.impl

    testImplementation libs.slf4j.simple
    testImplementation libs.hamcrest.core
}

artifacts {
    archives war
    archives sourcesJar
    archives javadocJar
    archives groovydocJar
}

/**
 * 针对本机 cargo 运行功能测试
 * 针对嵌入式 gretty 运行有些问题， gretty:appStart task 在本机不能运行 100% 完成，一直阻塞，无法运行 functionalTest
 * 也无法执行 appStop 以结束容器运行
 *
 * functionalTest task 没有被 check 依赖，需手动执行
 */
tasks.named('functionalTest') {
    dependsOn cargoStartLocal
    finalizedBy cargoStopLocal
}

apply from: "jsDependencies.gradle"
war.dependsOn fetchExternalJs
apply from: "jsOptimize.gradle"


publishing.publications.named(ext.publishName) {
    pom {
        name = "todo-web"
        description = 'Gradle plugin for managing applications and databases on CloudBees RUN@cloud.'
        url = "https://github.com/dearall/todo.git"
        inceptionYear = '2021'
        licenses {
            license {
                name = "The Apache License, Version 2.0"
                url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                distribution = 'repo'
            }
        }
        developers {
            developer {
                id = "johnd"
                name = "John Doe"
                email = "john.doe@example.com"
            }
        }
        scm {
            connection = "scm:git:https://github.com/dearall/todo.git"
            developerConnection = "scm:git:https://github.com/dearall/todo.git"
            url = "https://github.com/dearall/todo.git"
        }
    }
}
