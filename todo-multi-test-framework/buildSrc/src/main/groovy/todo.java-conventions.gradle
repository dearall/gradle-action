plugins {
    id 'java'
}

group = 'com.manning.gia.todo'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
        vendor = JvmVendorSpec.ADOPTOPENJDK
    }
}

tasks.withType(Test).configureEach {
    // Discover and execute JUnit4-based tests
    useJUnit() // Junit 4/3 using this feature to execute tests.

    // Discover and execute JUnit Platform-based tests
    useJUnitPlatform() // spock using this feature to execute tests.

    // With JUnit Platform, only includes and excludes are used to filter test classes
    // â€” scanForTestClasses has no effect.
    include 'com/manning/gia/todo/**/*'

    // Discover and execute TestNG-based tests
    // testNG using this to execute tests.
    // useTestNG()

    // listen to events in the test execution lifecycle
    /*
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }*/

    // Fail the 'test' task on the first test failure
    failFast = true

    // listen to standard out and standard error of the test JVM(s)
    /*
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }*/

    testLogging {
        // show standard out and standard error of the test JVM(s) on the console
        showStandardStreams true
        // Sets the events to be logged.
        events "passed", "skipped", "failed"
    }
}

test {
    forkEvery = 5
    maxParallelForks = determineMaxParallelForks()

    println("maxParallelForks: " + maxParallelForks)
}

dependencies {
    testImplementation (libs.junit.jupiter.api)
    testRuntimeOnly (libs.junit.jupiter.engine)
    testRuntimeOnly (libs.junit.vintage.engine)

    testImplementation (libs.junit4)
    testImplementation (libs.testng)
    testImplementation (libs.spock.core)
    testImplementation (libs.spock.junit4)
}

static def determineMaxParallelForks() {
    (Runtime.runtime.availableProcessors() / 2) < 1 ? 1 : Runtime.runtime.availableProcessors() / 2
}